"""
Django settings for patmatch_backend project.

Generated by 'django-admin startproject' using Django 4.2.17.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-your-secret-key-here'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_filters',
    
    # Local apps
    'accounts',
    'pets',
    'clinics',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'patmatch_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'patmatch_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ar'

TIME_ZONE = 'Africa/Cairo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "https://petow.app",
    "https://www.petow.app",
    "https://api.petow.app",
]

# Get CORS origins from environment variable if set
if os.environ.get('CORS_ALLOWED_ORIGINS'):
    cors_origins = os.environ.get('CORS_ALLOWED_ORIGINS').split(',')
    CORS_ALLOWED_ORIGINS = [origin.strip() for origin in cors_origins]
    print(f"DEBUG: CORS_ALLOWED_ORIGINS set from environment: {CORS_ALLOWED_ORIGINS}")
else:
    print(f"DEBUG: Using default CORS_ALLOWED_ORIGINS: {CORS_ALLOWED_ORIGINS}")

# Ensure CORS is properly configured
CORS_ALLOW_CREDENTIALS = True

# Additional CORS settings for better compatibility
CORS_ALLOW_ALL_ORIGINS = False  # Explicitly disable this to avoid conflicts

# Allow Authorization header
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'cache-control',
    'pragma',
]

# Additional CORS settings
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

CORS_EXPOSE_HEADERS = [
    'content-length',
    'content-range',
    'x-total-count',
]

# Add preflight max age
CORS_PREFLIGHT_MAX_AGE = 86400

# Django Sites
SITE_ID = 1

# Custom User Model
AUTH_USER_MODEL = 'accounts.User'

# CSRF Settings
CSRF_TRUSTED_ORIGINS = [
    "https://petow.app",
    "https://www.petow.app",
    "https://api.petow.app",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# Get CSRF trusted origins from environment variable if set
if os.environ.get('CSRF_TRUSTED_ORIGINS'):
    csrf_origins = os.environ.get('CSRF_TRUSTED_ORIGINS').split(',')
    CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in csrf_origins]
    print(f"DEBUG: CSRF_TRUSTED_ORIGINS set from environment: {CSRF_TRUSTED_ORIGINS}")
else:
    print(f"DEBUG: Using default CSRF_TRUSTED_ORIGINS: {CSRF_TRUSTED_ORIGINS}")

# Additional CSRF settings
CSRF_COOKIE_SECURE = True  # Only send cookie over HTTPS
CSRF_COOKIE_SAMESITE = 'Lax'  # CSRF cookie SameSite attribute
CSRF_USE_SESSIONS = False  # Store CSRF token in cookie, not session

# Firebase Configuration with environment variables
FIREBASE_CONFIG = {
    'apiKey': "AIzaSyBZqT72-0nfA4gibpKihOTnj4PP-X37f9s",
    'authDomain': "petmatch-1e75d.firebaseapp.com",
    'projectId': "petmatch-1e75d",
    'storageBucket': "petmatch-1e75d.firebasestorage.app",
    'messagingSenderId': "171353883247",
    'appId': "1:171353883247:web:3475e9de4c60c3d586439a",
    'measurementId': "G-D2M2P5S7M6"
}

# Firebase Admin SDK Environment Variables
FIREBASE_PRIVATE_KEY_ID = config('FIREBASE_PRIVATE_KEY_ID', default='')
FIREBASE_PRIVATE_KEY = config('FIREBASE_PRIVATE_KEY', default='')
FIREBASE_CLIENT_EMAIL = config('FIREBASE_CLIENT_EMAIL', default='')
FIREBASE_CLIENT_ID = config('FIREBASE_CLIENT_ID', default='')
FIREBASE_CLIENT_X509_CERT_URL = config('FIREBASE_CLIENT_X509_CERT_URL', default='')

# Brevo (Sendinblue) Configuration
BREVO_API_KEY = config('BREVO_API_KEY', default='')
BREVO_SMTP_USER = config('BREVO_SMTP_USER', default='')
BREVO_FROM_EMAIL = config('BREVO_FROM_EMAIL', default='')
BREVO_FROM_NAME = config('BREVO_FROM_NAME', default='PetMatch')
BREVO_SERVER_EMAIL = config('BREVO_SERVER_EMAIL', default='')

# Email Configuration using Brevo API (more reliable than SMTP)
if BREVO_API_KEY and BREVO_FROM_EMAIL:
    EMAIL_BACKEND = 'accounts.brevo_email_backend.BrevoEmailBackend'
    DEFAULT_FROM_EMAIL = BREVO_FROM_EMAIL
    SERVER_EMAIL = BREVO_SERVER_EMAIL
    print("âœ… Using Brevo API email backend")
else:
    # Fallback to console backend for development
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    print("WARNING: Brevo email credentials not found. Using console email backend.")

# Brevo API Configuration (for advanced features like campaigns)
BREVO_CONFIG = {
    'api_key': BREVO_API_KEY,
    'base_url': 'https://api.brevo.com/v3',
}

# Email settings for development/production
if DEBUG:
    # In development, you might want to use console backend for testing
    # EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    pass
else:
    # Production email settings
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

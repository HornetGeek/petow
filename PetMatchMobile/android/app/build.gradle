apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "com.facebook.react"

import com.android.build.OutputFile

logger.lifecycle("[react-native] Resolved .nvmrc at ${rootProject.file("../.nvmrc").absolutePath}, exists=${rootProject.file("../.nvmrc").exists()}")

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    def nvmrc = rootProject.file("../.nvmrc")
    if (nvmrc.exists()) {
        def requestedNodeVersion = nvmrc.text.trim()
        def normalizedNodeVersion = requestedNodeVersion.startsWith("v") ? requestedNodeVersion : "v${requestedNodeVersion}"
        def nodeBinary = new File(System.getProperty("user.home"), ".nvm/versions/node/${normalizedNodeVersion}/bin/node")
        if (nodeBinary.exists()) {
            logger.lifecycle("[react-native] Using Node executable: ${nodeBinary.absolutePath}")
            nodeExecutableAndArgs = [nodeBinary.absolutePath]
        }
    }

    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")
    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "debug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

/**
 * Set this to true to create four separate APKs instead of one,
 * one for each native architecture. This is useful if you don't
 * use App Bundles (https://developer.android.com/guide/app-bundle/)
 * and want to have separate APKs to upload to the Play Store.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
// Enable R8/ProGuard for release builds so mapping.txt is generated
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Private function to get the list of Native Architectures you want to build.
 * This reads the value from reactNativeArchitectures in your gradle.properties
 * file and works together with the --active-arch-only flag of react-native run-android.
 */
def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : ["arm64-v8a", "x86_64"]
}

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "com.petmatchmobile"
    defaultConfig {
        applicationId "com.petmatchmobile"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 13
        versionName "1.0.12"
        
        // Limit native libraries to 64-bit ABIs to satisfy the 16KB page-size mandate
        ndk {
            abiFilters "arm64-v8a", "x86_64"
        }
        
        // Simplified packaging options
        packagingOptions {
            pickFirst '**/libc++_shared.so'
            pickFirst '**/libjsc.so'
            pickFirst '**/libreactnativejni.so'
        }
    }

    // Ensure Java/Kotlin targets are aligned with toolchain (RN 0.74 uses 17)
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }

    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include (*reactNativeArchitectures())
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Now using the release signing config for production
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            ndk {
                // Emit FULL symbol information so Play Console symbol uploads are available
                debugSymbolLevel 'FULL'
            }
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            // Example: versionCode 1 will generate 1001 for arm64-v8a, 1002 for x86_64
            def versionCodes = ["x86_64": 1, "arm64-v8a": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal APK
                output.versionCodeOverride =
                        defaultConfig.versionCode * 1000 + versionCodes.get(abi)
            }

        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    // Use Firebase BoM to align all Firebase SDKs
    implementation platform('com.google.firebase:firebase-bom:33.4.0')
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-firestore'

    // DataStore (required by Firebase Heartbeat & Firestore 26+)
    implementation "androidx.datastore:datastore-preferences:1.1.1"
    implementation "androidx.datastore:datastore-preferences-core:1.1.1"

    // Coroutines (datastore depends on it; make it explicit)
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3"

    // Kotlin stdlib provided by Kotlin Gradle plugin; no need to declare explicitly

    // Lifecycle dependencies - FIXED VERSIONS (2.7.0 works, 2.8.x has bugs)
    implementation 'androidx.lifecycle:lifecycle-runtime:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-common:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-process:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-livedata:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-service:2.7.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-savedstate:2.7.0'

    // Activity dependency - Required for ReportFragment$ActivityInitializationListener
    implementation 'androidx.activity:activity:1.8.2'

    // Fragment dependency - Required for ReportFragment$ActivityInitializationListener
    implementation 'androidx.fragment:fragment:1.6.2'

    // Core dependency - Required for ReportFragment$ActivityInitializationListener (compatible with compileSdk 34)
    implementation 'androidx.core:core:1.12.0'

    // AppCompat dependency - Required for ReportFragment$ActivityInitializationListener
    implementation 'androidx.appcompat:appcompat:1.6.1'

    // Startup dependency - Required for androidx.startup.InitializationProvider
    implementation 'androidx.startup:startup-runtime:1.1.1'

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.squareup.okhttp3', module:'okhttp'
    }

    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}")
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/react-native/node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

// Move Google services plugin to the very bottom
apply plugin: 'com.google.gms.google-services'

version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:13
    container_name: petmatch_db_prod
    environment:
      POSTGRES_DB: petmatch
      POSTGRES_USER: ${POSTGRES_USER:-petmatch_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-petmatch_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - petmatch_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: petmatch_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    networks:
      - petmatch_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Django Backend
  backend:
    build:
      context: ./patmatch
      dockerfile: Dockerfile
    container_name: petmatch_backend_prod
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
    volumes:
      - static_files:/app/staticfiles
      - media_files:/app/media
    depends_on:
      - db
      - redis
    networks:
      - petmatch_network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    command: >
      sh -c "python manage.py migrate &&
              python manage.py collectstatic --noinput &&
              gunicorn --bind 0.0.0.0:8000 --workers 4 --worker-class gevent patmatch_backend.wsgi:application"

  # Next.js Frontend
  frontend:
    build:
      context: ./petmatch-nextjs
      dockerfile: Dockerfile
    container_name: petmatch_frontend_prod
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - petmatch_network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Nginx Reverse Proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: petmatch_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - static_files:/var/www/static
      - media_files:/var/www/media
      - ./ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - petmatch_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    container_name: petmatch_certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./nginx/webroot:/var/www/html
    command: certonly --webroot --webroot-path=/var/www/html --email ${CERTBOT_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}
    networks:
      - petmatch_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_files:
    driver: local
  media_files:
    driver: local

networks:
  petmatch_network:
    driver: bridge 
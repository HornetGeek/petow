version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:13
    container_name: petmatch_db
    environment:
      POSTGRES_DB: petmatch
      POSTGRES_USER: petmatch_user
      POSTGRES_PASSWORD: petmatch_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - petmatch_network
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: petmatch_redis
    ports:
      - "6379:6379"
    networks:
      - petmatch_network
    restart: unless-stopped

  # Django Backend
  backend:
    build:
      context: ./patmatch
      dockerfile: Dockerfile
    container_name: petmatch_backend
    environment:
      - DEBUG=False
      - SECRET_KEY=your-secret-key-here
      - DATABASE_URL=postgresql://petmatch_user:petmatch_password@db:5432/petmatch
      - REDIS_URL=redis://redis:6379
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000
    volumes:
      - ./patmatch:/app
      - static_files:/app/staticfiles
      - media_files:/app/media
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    networks:
      - petmatch_network
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate &&
              python manage.py collectstatic --noinput &&
              gunicorn --bind 0.0.0.0:8000 --workers 3 patmatch_backend.wsgi:application"

  # Next.js Frontend
  frontend:
    build:
      context: ./petmatch-nextjs
      dockerfile: Dockerfile
    container_name: petmatch_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - petmatch_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: petmatch_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled
      - static_files:/var/www/static
      - media_files:/var/www/media
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - petmatch_network
    restart: unless-stopped

volumes:
  postgres_data:
  static_files:
  media_files:

networks:
  petmatch_network:
    driver: bridge 